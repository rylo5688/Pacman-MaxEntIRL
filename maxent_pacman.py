import numpy as np
import matplotlib.pyplot as plt

from maxentIRL import maxent_irl

smallClassicStates = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0],
                      [0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0],
                      [0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0],
                      [0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0],
                      [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

actions = [(0,0), (0,1), (0,-1), (1,0), (-1,0)] # Row-column

def state_index_to_coords(index, n_rows=18):
    return (index//n_rows, index%n_rows)


def transition_probability(n_states):
    transition_probs = np.empty((n_states, n_states, len(actions)))
    for curState in range(n_states):
        for nextState in range(n_states):
            for (aIndex, (xAct, yAct)) in enumerate(actions):
                xCur, yCur = state_index_to_coords(curState)
                xNext, yNext = state_index_to_coords(nextState)

                if (xCur + xAct, yCur + yAct) == (xNext, yNext):
                    transition_probs[curState][nextState][aIndex] = 1.0
                else:
                    transition_probs[curState][nextState][aIndex] = 0.0
    return transition_probs

def normalize(vals):
    """
    normalize array
    """

    return vals/sum(vals)

if __name__ == '__main__':
    width, height = 20, 7   # This is the width x height for the smallClassic layout without the walls
    discount = 0.01         # MDP discount factor
    n_trajectories = 10     # Number of samples
    gradient_iterations = 1   # Gradient descent iterations
    learning_rate = 0.01    # Gradient descent learning rate

    feature_matrix = np.zeros( (width*height, 3) ) # Identity matrix
    for i in range(width*height):
        for j in range(3):
            if j == 0:
                feature_matrix[i][j] = 0 # Pacman
            elif j == 1:
                feature_matrix[i][j] = -500 # Ghost
            else:
                feature_matrix[i][j] = 10


    transition_probs = transition_probability(width*height)

    path1 = [(114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (-1, 0), 114), (114, (0, -1), 113), (113, (-1, 0), 113), (113, (-1, 0), 113), (113, (0, -1), 112), (112, (0, 1), 112), (112, (0, -1), 112), (112, (0, -1), 111), (111, (-1, 0), 111), (111, (0, -1), 111), (111, (1, 0), 90), (90, (0, 1), 90), (90, (0, -1), 90), (90, (1, 0), None)]
    path2 = [(114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (-1, 0), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (1, 0), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (-1, 0), 114), (114, (0, 1), 115), (115, (-1, 0), 115), (115, (0, -1), 115), (115, (0, 1), None)]
    path3 = [(114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (-1, 0), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (-1, 0), 114), (114, (0, 0), 114), (114, (-1, 0), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (1, 0), 114), (114, (0, 0), 114), (114, (1, 0), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (1, 0), 114), (114, (0, -1), 113), (113, (0, 1), 113), (113, (0, 1), 113), (113, (0, -1), None)]
    pathWin = [(114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (-1, 0), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, -1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (-1, 0), 114), (114, (0, 0), 114), (114, (-1, 0), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (1, 0), 114), (114, (0, -1), 113), (113, (1, 0), 113), (113, (1, 0), 113), (113, (0, -1), 112), (112, (0, -1), 112), (112, (0, 1), 112), (112, (0, -1), 111), (111, (0, 1), 111), (111, (0, -1), 111), (111, (1, 0), 90), (90, (0, 1), 90), (90, (-1, 0), 90), (90, (1, 0), 69), (69, (-1, 0), 69), (69, (-1, 0), 69), (69, (1, 0), 48), (48, (-1, 0), 48), (48, (0, -1), 48), (48, (1, 0), 27), (27, (0, -1), 27), (27, (1, 0), 27), (27, (0, -1), 26), (26, (1, 0), 26), (26, (1, 0), 26), (26, (-1, 0), 47), (47, (0, 1), 47), (47, (0, -1), 47), (47, (0, -1), 46), (46, (-1, 0), 46), (46, (0, 1), 46), (46, (1, 0), 25), (25, (0, 1), 25), (25, (0, 1), 25), (25, (0, -1), 24), (24, (0, 1), 24), (24, (0, 1), 24), (24, (0, -1), 23), (23, (0, 1), 23), (23, (0, -1), 23), (23, (0, -1), 22), (22, (-1, 0), 22), (22, (0, -1), 22), (22, (-1, 0), 43), (43, (-1, 0), 43), (43, (-1, 0), 43), (43, (-1, 0), 64), (64, (0, 1), 64), (64, (0, 1), 64), (64, (-1, 0), 85), (85, (0, 1), 85), (85, (-1, 0), 85), (85, (-1, 0), 106), (106, (0, 1), 106), (106, (0, 1), 106), (106, (0, 1), 107), (107, (0, 1), 107), (107, (0, 1), 107), (107, (0, 1), 108), (108, (0, 1), 108), (108, (0, 1), 108), (108, (0, 1), 109), (109, (1, 0), 109), (109, (1, 0), 109), (109, (0, 1), 110), (110, (1, 0), 110), (110, (0, 1), 110), (110, (0, 1), 111), (111, (1, 0), 111), (111, (0, 1), 111), (111, (0, -1), 110), (110, (1, 0), 110), (110, (1, 0), 110), (110, (0, -1), 109), (109, (0, -1), 109), (109, (0, 1), 109), (109, (1, 0), 88), (88, (0, -1), 88), (88, (0, 1), 88), (88, (1, 0), 67), (67, (0, -1), 67), (67, (0, 1), 67), (67, (1, 0), 46), (46, (-1, 0), 46), (46, (-1, 0), 46), (46, (1, 0), 25), (25, (-1, 0), 25), (25, (-1, 0), 25), (25, (-1, 0), 46), (46, (-1, 0), 46), (46, (-1, 0), 46), (46, (-1, 0), 67), (67, (-1, 0), 67), (67, (-1, 0), 67), (67, (0, -1), 66), (66, (0, 1), 66), (66, (0, -1), 66), (66, (0, 1), 67), (67, (0, 1), 67), (67, (0, -1), 67), (67, (1, 0), 46), (46, (0, 1), 46), (46, (0, -1), 46), (46, (0, 1), 47), (47, (0, 1), 47), (47, (0, -1), 47), (47, (0, 1), 48), (48, (0, 1), 48), (48, (0, -1), 48), (48, (-1, 0), 69), (69, (0, 1), 69), (69, (0, -1), 69), (69, (0, 1), 70), (70, (1, 0), 70), (70, (1, 0), 70), (70, (0, 1), 71), (71, (1, 0), 71), (71, (1, 0), 71), (71, (0, 1), 72), (72, (1, 0), 72), (72, (1, 0), 72), (72, (0, 1), 73), (73, (1, 0), 73), (73, (1, 0), 73), (73, (0, 1), 74), (74, (1, 0), 74), (74, (1, 0), 74), (74, (0, 1), 75), (75, (1, 0), 75), (75, (1, 0), 75), (75, (0, 1), 76), (76, (1, 0), 76), (76, (1, 0), 76), (76, (1, 0), 55), (55, (1, 0), 55), (55, (1, 0), 55), (55, (1, 0), 34), (34, (0, -1), 34), (34, (0, 1), 34), (34, (0, 1), 35), (35, (0, -1), 35), (35, (0, 1), 35), (35, (0, 1), 36), (36, (0, -1), 36), (36, (0, 1), 36), (36, (0, 1), 37), (37, (0, 1), 37), (37, (0, -1), 37), (37, (0, 1), 38), (38, (-1, 0), 38), (38, (-1, 0), 38), (38, (0, -1), 37), (37, (-1, 0), 37), (37, (-1, 0), 37), (37, (0, -1), 36), (36, (0, -1), 36), (36, (0, 1), 36), (36, (-1, 0), 57), (57, (0, -1), 57), (57, (0, 1), 57), (57, (0, -1), 56), (56, (0, -1), 56), (56, (0, 1), 56), (56, (0, 1), 57), (57, (1, 0), 57), (57, (-1, 0), 57), (57, (-1, 0), 78), (78, (1, 0), 78), (78, (-1, 0), 78), (78, (0, 1), 79), (79, (0, -1), 79), (79, (0, 1), 79), (79, (0, 0), 79), (79, (0, -1), 79), (79, (0, 1), 79), (79, (0, -1), 78), (78, (-1, 0), 78), (78, (0, 1), 78), (78, (-1, 0), 99), (99, (-1, 0), 99), (99, (0, 1), 99), (99, (-1, 0), 120), (120, (0, 1), 120), (120, (0, -1), 120), (120, (0, -1), 119), (119, (0, 1), 119), (119, (-1, 0), 119), (119, (0, -1), 118), (118, (1, 0), 118), (118, (-1, 0), 118), (118, (1, 0), 97), (97, (1, 0), 97), (97, (0, -1), 97), (97, (-1, 0), 118), (118, (0, -1), 118), (118, (1, 0), 118), (118, (0, -1), 117), (117, (0, -1), 117), (117, (1, 0), 117), (117, (0, -1), 116), (116, (-1, 0), 116), (116, (0, -1), 116), (116, (0, -1), 115), (115, (-1, 0), 115), (115, (0, 1), 115), (115, (0, 1), 116), (116, (0, 1), 116), (116, (-1, 0), 116), (116, (0, 1), 117), (117, (0, 1), 117), (117, (-1, 0), 117), (117, (0, 1), 118), (118, (1, 0), 118), (118, (0, -1), 118), (118, (0, 1), 119), (119, (1, 0), 119), (119, (0, -1), 119), (119, (0, 1), 120), (120, (0, -1), 120), (120, (0, -1), 120), (120, (0, 1), 121), (121, (0, -1), 121), (121, (1, 0), 121), (121, (0, 1), 122), (122, (0, -1), 122), (122, (0, -1), 122), (122, (0, 1), 123), (123, (0, -1), 123), (123, (1, 0), 123), (123, (1, 0), 102), (102, (0, -1), 102), (102, (0, 1), 102), (102, (1, 0), 81), (81, (0, -1), 81), (81, (-1, 0), 81), (81, (1, 0), 60), (60, (0, -1), 60), (60, (-1, 0), 60), (60, (1, 0), None)]
    pathWin2 = [(114, (0, 0), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (-1, 0), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (1, 0), 114), (114, (0, 0), 114), (114, (0, 1), 114), (114, (0, 0), 114), (114, (0, -1), 114), (114, (0, -1), 113), (113, (0, -1), 113), (113, (0, -1), 112), (112, (0, -1), 112), (112, (0, -1), 111), (111, (0, 1), 111), (111, (0, -1), 110), (110, (-1, 0), 110), (110, (0, -1), 109), (109, (-1, 0), 109), (109, (0, -1), 108), (108, (0, 1), 108), (108, (0, -1), 107), (107, (0, 1), 107), (107, (0, -1), 106), (106, (0, 1), 106), (106, (1, 0), 85), (85, (0, 1), 85), (85, (1, 0), 64), (64, (1, 0), 64), (64, (1, 0), 43), (43, (1, 0), 43), (43, (1, 0), 22), (22, (0, 1), 22), (22, (0, 1), 23), (23, (0, 1), 23), (23, (0, 1), 24), (24, (0, 1), 24), (24, (0, 1), 25), (25, (0, 1), 25), (25, (0, 1), 26), (26, (0, 1), 26), (26, (0, 1), 27), (27, (-1, 0), 27), (27, (-1, 0), 48), (48, (-1, 0), 48), (48, (0, -1), 47), (47, (-1, 0), 47), (47, (0, -1), 46), (46, (-1, 0), 46), (46, (-1, 0), 67), (67, (0, -1), 67), (67, (0, -1), 66), (66, (0, -1), 66), (66, (0, 1), 67), (67, (0, -1), 67), (67, (-1, 0), 88), (88, (0, -1), 88), (88, (-1, 0), 109), (109, (0, -1), 109), (109, (0, 1), 110), (110, (1, 0), 110), (110, (0, 1), 111), (111, (1, 0), 111), (111, (1, 0), 90), (90, (1, 0), 90), (90, (1, 0), 69), (69, (1, 0), 69), (69, (0, 1), 70), (70, (1, 0), 70), (70, (0, 1), 71), (71, (1, 0), 71), (71, (0, 1), 72), (72, (1, 0), 72), (72, (0, 1), 73), (73, (1, 0), 73), (73, (0, 1), 74), (74, (0, -1), 74), (74, (0, 1), 75), (75, (0, -1), 75), (75, (0, 1), 76), (76, (0, -1), 76), (76, (0, 0), 76), (76, (0, -1), 76), (76, (1, 0), 55), (55, (-1, 0), 55), (55, (1, 0), 34), (34, (0, 1), 34), (34, (0, 0), 34), (34, (-1, 0), 34), (34, (0, 1), 35), (35, (-1, 0), 35), (35, (0, 1), 36), (36, (0, 1), 36), (36, (-1, 0), 57), (57, (0, 1), 57), (57, (0, -1), 56), (56, (0, 1), 56), (56, (0, 1), 57), (57, (0, 1), 57), (57, (-1, 0), 78), (78, (-1, 0), 78), (78, (0, 1), 79), (79, (-1, 0), 79), (79, (0, 0), 79), (79, (-1, 0), 79), (79, (0, -1), 78), (78, (0, -1), 78), (78, (-1, 0), 99), (99, (0, -1), 99), (99, (-1, 0), 120), (120, (0, -1), 120), (120, (0, -1), 119), (119, (0, -1), 119), (119, (0, -1), 118), (118, (0, -1), 118), (118, (1, 0), 97), (97, (0, -1), 97), (97, (-1, 0), 118), (118, (0, -1), 118), (118, (0, -1), 117), (117, (0, -1), 117), (117, (0, -1), 116), (116, (0, -1), 116), (116, (0, 1), 117), (117, (0, -1), 117), (117, (0, 1), 118), (118, (0, -1), 118), (118, (0, -1), 117), (117, (0, -1), 117), (117, (0, -1), 116), (116, (0, -1), 116), (116, (0, -1), 115), (115, (0, -1), 115), (115, (0, 1), 116), (116, (0, -1), 116), (116, (0, 1), 117), (117, (0, -1), 117), (117, (0, 1), 118), (118, (0, -1), 118), (118, (0, 1), 119), (119, (0, -1), 119), (119, (0, 1), 120), (120, (1, 0), 120), (120, (0, 1), 121), (121, (1, 0), 121), (121, (0, 1), 122), (122, (1, 0), 122), (122, (0, 1), 123), (123, (1, 0), 123), (123, (1, 0), 102), (102, (1, 0), 102), (102, (1, 0), 81), (81, (1, 0), 81), (81, (1, 0), 60), (60, (0, 1), 60), (60, (1, 0), 39), (39, (0, 1), 39), (39, (0, -1), 38), (38, (1, 0), 38), (38, (0, -1), 37), (37, (0,0), None)]
    sample_paths = np.array([pathWin, pathWin2])

    rewards_maxent = maxent_irl(sample_paths, feature_matrix, transition_probs, discount=discount, iterations=gradient_iterations, learning_rate=learning_rate )
    # maxent_irl()    # for row in smallClassicStates:
    print(rewards_maxent)

